import datetime
import os

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, PreCheckoutQuery, InlineQuery, \
    InlineQueryResultArticle, InputTextMessageContent

from aiogram_dialog import Dialog, DialogManager, StartMode, Window, ShowMode
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select
from aiogram_dialog.api.entities import MediaAttachment
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format, Multi, List, Case
from aiogram_dialog.widgets.kbd import SwitchTo

from environs import Env

from app.bot.database.db_funcs import get_catalog, get_subcategories, get_products, get_current_product, \
    get_all_products, \
    update_order, add_to_users
from app.bot.payments.youkassa import order
from app.bot.services.FAQ import FAQ

from ..services.utils import save_order_and_update_excel

router = Router()

env = Env()
env.read_env()


class FSM(StatesGroup):
    question = State()
    to_payment = State()
    product_window = State()
    start = State()
    cart = State()
    catalog = State()
    FAQ = State()
    categories = State()
    subcategories = State()
    products = State()
    approve_product = State()
    count = State()


def check_digit(text: str):
    return int(text)


async def to_subcategory(callback: CallbackQuery,
                         widget: Select,
                         dialog_manager: DialogManager,
                         item_id: str):
    dialog_manager.dialog_data.update({"category": item_id})
    await dialog_manager.switch_to(FSM.subcategories)


async def pass_func(message: Message,
                    widget: ManagedTextInput,
                    dialog_manager: DialogManager,
                    text: str):
    dialog_manager.show_mode = ShowMode.NO_UPDATE


async def move_to_cart(message: Message,
                       widget: ManagedTextInput,
                       dialog_manager: DialogManager,
                       text: str):
    session = dialog_manager.middleware_data['session']
    category = dialog_manager.dialog_data["category"]
    subcategory = dialog_manager.dialog_data["subcategory"]
    product = dialog_manager.dialog_data["product"]
    product = await get_current_product(session, category, subcategory, product)

    try:
        cart = dialog_manager.dialog_data['cart']
    except Exception as e:
        cart = []

    cart.append({'product_id': product[4],
                 'amount': int(text)})
    dialog_manager.dialog_data.update({'cart': cart})
    await dialog_manager.switch_to(FSM.approve_product)


async def to_products(callback: CallbackQuery,
                      widget: Select,
                      dialog_manager: DialogManager,
                      item_id: str):
    dialog_manager.dialog_data.update({"subcategory": item_id})
    await dialog_manager.switch_to(FSM.products)


async def to_product_window(callback: CallbackQuery,
                            widget: Select,
                            dialog_manager: DialogManager,
                            item_id: str):
    dialog_manager.dialog_data.update({"product": item_id})
    await dialog_manager.switch_to(FSM.product_window)


async def clear_cart(callback: CallbackQuery,
                     button: Button,
                     dialog_manager: DialogManager):
    dialog_manager.dialog_data['cart'] = []


async def show_answer(callback: CallbackQuery,
                      button: Button,
                      dialog_manager: DialogManager,
                      text: str):
    FAQ_list = list(FAQ.keys())
    question_num = FAQ_list.index(text)
    dialog_manager.dialog_data['question_num'] = question_num
    await dialog_manager.switch_to(FSM.question)


async def back_and_switch_show_mode(callback: CallbackQuery,
                                    button: Button,
                                    dialog_manager: DialogManager):
    dialog_manager.show_mode = ShowMode.DELETE_AND_SEND
    await dialog_manager.switch_to(FSM.start)


async def payment(callback: CallbackQuery,
                  button: Button,
                  dialog_manager: DialogManager, **kwargs):
    items = dialog_manager.dialog_data['items_in_cart']

    order_products = ''
    for item in items:
        order_products += item[0] + "_" + str(item[1]) + "—à—Ç._" + str(item[2]) + "—Ä—É–±.\n"

    total_cost = dialog_manager.dialog_data['total_cost']
    await order(callback.from_user.id, callback.bot, products=order_products, total_price=total_cost)


async def add_to_cart(callback: CallbackQuery,
                      widget: Select,
                      dialog_manager: DialogManager,
                      item_id: str):
    dialog_manager.dialog_data.update({"product": item_id})
    await dialog_manager.switch_to(FSM.product_window)


async def getter_subcategories(dialog_manager: DialogManager,
                               dispatcher: Dispatcher,
                               **kwargs):
    session = dialog_manager.middleware_data['session']
    category = dialog_manager.dialog_data["category"]
    subcategories = await get_subcategories(session, category)
    return {'subcategories': subcategories}


async def getter_categories(dialog_manager: DialogManager,
                            dispatcher: Dispatcher,
                            **kwargs):
    session = dialog_manager.middleware_data['session']
    category = dialog_manager.dialog_data["category"]
    subcategories = await get_subcategories(session, category)
    return {'subcategories': subcategories}


async def getter_catalog(dialog_manager: DialogManager,
                         dispatcher: Dispatcher,
                         **kwargs):
    session = dialog_manager.middleware_data['session']
    catalog = await get_catalog(session)
    return {'catalog': catalog}


async def getter_products(dialog_manager: DialogManager,
                          dispatcher: Dispatcher,
                          **kwargs):
    session = dialog_manager.middleware_data['session']
    category = dialog_manager.dialog_data["category"]
    subcategory = dialog_manager.dialog_data["subcategory"]
    products = await get_products(session, category, subcategory)

    return {'products': products,
            'subcategory': subcategory}


async def getter_cart(dialog_manager: DialogManager,
                      dispatcher: Dispatcher,
                      **kwargs):
    session = dialog_manager.middleware_data['session']
    products = await get_all_products(session)

    try:
        cart = dialog_manager.dialog_data['cart']
    except Exception as e:
        cart = []
    items_in_cart = []

    total_cost = 0
    for item in cart:
        product = [product for product in products if product[4] == item['product_id']][0]
        items_in_cart.append((product[0], item['amount'], product[1], item['amount'] * product[1]))
        total_cost += item['amount'] * product[1]

    dialog_manager.dialog_data['total_cost'] = total_cost
    dialog_manager.dialog_data['items_in_cart'] = items_in_cart

    return {'total_cost': total_cost,
            'items_in_cart': items_in_cart,
            'cart_is_not_empty': len(cart) > 0}


async def getter_question(dialog_manager: DialogManager,
                          dispatcher: Dispatcher,
                          **kwargs):
    question = list(FAQ.items())[dialog_manager.dialog_data['question_num']]
    return {'question': question[0],
            'answer': question[1]}


async def getter_current_product(dialog_manager: DialogManager,
                                 dispatcher: Dispatcher,
                                 **kwargs):
    session = dialog_manager.middleware_data['session']
    category = dialog_manager.dialog_data["category"]
    subcategory = dialog_manager.dialog_data["subcategory"]
    product = dialog_manager.dialog_data["product"]
    product = await get_current_product(session, category, subcategory, product)

    return {'name': product[0],
            'price': product[1],
            'description': product[2],
            'photo': MediaAttachment(type=ContentType.PHOTO,
                                     path=os.path.join("/app", "app", "bot", "photos", category, subcategory,
                                                       product[3])),
            'subcategory': subcategory}


async def getter_FAQ(dialog_manager: DialogManager,
                     dispatcher: Dispatcher,
                     **kwargs):
    return {"questions": FAQ.keys()}


dialog = Dialog(
    Window(
        Const("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <s>–∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</s> –º–∞–≥–∞–∑–∏–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏!\n\n"
              "<b>üõí –ö–∞—Ç–∞–ª–æ–≥</b> - –î–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä–∞ –ø–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n\n"
              "<b>üõç –ö–æ—Ä–∑–∏–Ω–∞</b> - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
              "<b>‚ùì F.A.Q.</b> - –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–∂–º–∏—Ç–µ "),
        SwitchTo(Const("üõí –ö–∞—Ç–∞–ª–æ–≥"),
                 id="catalog",
                 state=FSM.catalog),
        SwitchTo(Const("üõç –ö–æ—Ä–∑–∏–Ω–∞"),
                 id="cart",
                 state=FSM.cart),
        SwitchTo(Const("‚ùì F.A.Q."),
                 id="FAQ",
                 state=FSM.FAQ),
        state=FSM.start
    ),
    Window(
        Const("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"),
        ScrollingGroup(
            Select(Format("{item}"),
                   id="catalog_buttons",
                   item_id_getter=lambda x: str(x),
                   items="catalog",
                   on_click=to_subcategory),
            height=4,
            width=1,
            id="catalog_group"),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                 id='back_to_start',
                 state=FSM.start),
        getter=getter_catalog,
        state=FSM.catalog
    ),
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
        ScrollingGroup(
            Select(Format("{item}"),
                   id="subcategories_buttons",
                   item_id_getter=lambda x: str(x),
                   items="subcategories",
                   on_click=to_products),
            height=5,
            width=2,
            id="subcategories_group"),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                 id='back_to_catalog',
                 state=FSM.catalog),
        getter=getter_categories,
        state=FSM.subcategories
    ),
    Window(
        Format("{subcategory}"),
        ScrollingGroup(
            Select(Format("{item}"),
                   id="products_buttons",
                   item_id_getter=lambda x: str(x),
                   items="products",
                   on_click=to_product_window),
            height=5,
            width=2,
            id="products_group"),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                 id='back_to_subcategories',
                 state=FSM.subcategories),
        getter=getter_products,
        state=FSM.products
    ),
    Window(Format("<i>{dialog_data[category]} / {dialog_data[subcategory]}</i>\n\n"
                  "{name}\n\n"
                  "–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
                  "–û–ø–∏—Å–∞–Ω–∏–µ: {description}"),
           DynamicMedia('photo'),
           SwitchTo(Const("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"),
                    id='add_to_cart',
                    state=FSM.count),
           SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    id='back_to_products',
                    state=FSM.products),
           getter=getter_current_product,
           state=FSM.product_window
           ),
    Window(Format("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞ (–≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)\n\n"
                  "<i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É</i>"),
           TextInput(id='input_count',
                     type_factory=check_digit,
                     on_success=move_to_cart),
           SwitchTo(Const("‚Ü©Ô∏è –û–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥"),
                    id="back_to_product",
                    state=FSM.product_window),
           state=FSM.count),
    Window(Format("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
                  "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É"),
           SwitchTo(Const("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"),
                    id="to_cart",
                    state=FSM.cart),
           SwitchTo(Const("‚Ü©Ô∏è –û–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥"),
                    id="back_to_catalog",
                    state=FSM.catalog),
           state=FSM.approve_product),
    Window(Const("üõí –ö–æ—Ä–∑–∏–Ω–∞\n"),
           Case(texts={
               0: Const("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–∞"),
               1: Multi(
                   List(
                       Format("{item[0]}\n"
                              "{item[1]}—à—Ç. x {item[2]} —Ä—É–±.\n"
                              "{item[3]} —Ä—É–±."),
                       sep='\n\n',
                       items='items_in_cart'),
                   Format("___________\n\n"
                          "<b>–ò—Ç–æ–≥–æ: {total_cost} —Ä—É–±–ª–µ–π.</b>")
               )
           },
               selector="cart_is_not_empty"),
           SwitchTo(Const("üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥"),
                    id="switch_to_catalog",
                    state=FSM.catalog),
           Button(Const("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é"),
                  id="to_payment",
                  on_click=payment,
                  when="cart_is_not_empty"),
           Button(Const("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"),
                  id="clear_cart",
                  on_click=clear_cart),
           SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                    id='back_to_start_from_cart',
                    state=FSM.start),
           getter=getter_cart,
           state=FSM.cart
           ),
    Window(
        Const("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
              "–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—Ç—å inline-—Ä–µ–∂–∏–º–æ–º: –£–∫–∞–∂–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ –≤ –ø–æ–ª–µ"
              "–¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å (–ø—Ä–∏–º–µ—Ä –Ω–∞ —Ñ–æ—Ç–æ), –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç, "
              "—á—Ç–æ –≤–∞–º –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—èüòâ\n\n"
              "–¢–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ."),
        ScrollingGroup(
            Select(
                Format("{item}"),
                id='faq',
                item_id_getter=lambda x: str(x),
                items="questions",
                on_click=show_answer
            ),
            width=1,
            height=6,
            id='faq_buttons_group'
        ),
        Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
               id='back_and_switch_show_mode',
               on_click=back_and_switch_show_mode),
        TextInput(id="input",
                  type_factory=lambda x: Exception,
                  on_success=pass_func),
        getter=getter_FAQ,
        state=FSM.FAQ
    ),
    Window(
        Format("‚ùì {question}\n\n"
               "‚ñ∂Ô∏è {answer}"),
        SwitchTo(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
                 id='back_to_products',
                 state=FSM.FAQ),
        state=FSM.question,
        getter=getter_question
    )
)


@router.message(Command(commands=['start']))
async def command_start(message: Message, dialog_manager: DialogManager,
                        **kwargs):
    session = kwargs['session']
    await add_to_users(session, message.from_user.id)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    await dialog_manager.start(state=FSM.start, mode=StartMode.RESET_STACK, show_mode=ShowMode.DELETE_AND_SEND)


@router.pre_checkout_query()
async def shipping_check(pre_checkout_query: PreCheckoutQuery,
                         bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message="–û—à–∏–±–∫–∞")  # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ


@router.message(F.successful_payment)
async def process_successful_payment(message: Message,
                                     **kwargs):
    await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!")

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    session = kwargs['session']
    price = message.successful_payment.total_amount // 100
    email = message.successful_payment.order_info.email
    address_info = message.successful_payment.order_info.shipping_address
    address = address_info.state + " " + address_info.city + " " + address_info.street_line1 + " " + address_info.street_line2 + " " + address_info.post_code
    phone_number = int(message.successful_payment.order_info.phone_number)
    info = message.successful_payment.invoice_payload.replace('\n', ' & ')
    time = str(datetime.datetime.now().replace(microsecond=0))

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–¥
    await update_order(session, info, price, phone_number, email, address, time)

    # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ excel-—Ç–∞–±–ª–∏—Ü–µ
    save_order_and_update_excel(items=info, price=price, phone_number=phone_number, email=email, address=address,
                                complete=0)


@router.inline_query()
async def faq_answers(query: InlineQuery):
    faq_data = FAQ
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    query_text = query.query.lower()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
    results = []
    for question, answer in faq_data.items():
        if query_text in question.lower():
            results.append(
                InlineQueryResultArticle(
                    id=question,
                    title=question,
                    input_message_content=InputTextMessageContent(message_text=answer)
                )
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await query.answer(results, cache_time=5)
