from random import choice


class stats:
    def __init__(self):
        self.info = {}

    def update(self, id, win):
        if id not in self.info.keys():
            self.info[id] = {'games': 0, 'wins': 0}
        self.info[id]['games'] += 1
        self.info[id]['wins'] += win

    def get_info(self, id):
        return self.info[id]['games'], \
            self.info[id]['wins']


statistics = stats()


def move(player_choice: str):
    bot_choice = choice(['–ö–∞–º–µ–Ω—åü™®', '–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è', '–ë—É–º–∞–≥–∞üìÑ'])
    if player_choice == bot_choice:
        result = "draw"
    elif (player_choice == '–ë—É–º–∞–≥–∞üìÑ' and bot_choice == '–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è') or (
            player_choice == '–ö–∞–º–µ–Ω—åü™®' and bot_choice == '–ë—É–º–∞–≥–∞üìÑ') or (
            player_choice == '–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è' and bot_choice == '–ö–∞–º–µ–Ω—åü™®'):
        result = "lose"
    else:
        result = "win"

    return result, bot_choice


def update_stats(id, win):
    statistics.update(id=id, win=win)


def stats(id):
    try:
        games, wins = statistics.get_info(id)
        return f"–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {games or 0}\n" \
               f"–ü–æ–±–µ–¥: {wins}\n" \
               f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {int(round(wins / games, 2) * 100)}%\n" \
               f"–°—ã–≥—Ä–∞–µ–º –µ—â—ë?"
    except KeyError:
        return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏. –ù–∞—á–Ω—ë–º?"
