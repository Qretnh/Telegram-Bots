from aiogram import Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from lexicon.lexicon import LEXICON_RU
from keyboards.keyboards import offer_keyboard, choose_keyboard, wait_keyboard
from services.game_logic import move, stats, update_stats

router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['/start'],
                         reply_markup=offer_keyboard)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help

@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU['/help'],
                         reply_markup=offer_keyboard)


@router.message(Command(commands='stats'))
async def process_help_command(message: Message):
    await message.answer(text=stats(message.from_user.id),
                         reply_markup=offer_keyboard)


@router.message((lambda message: '–î–∞–≤–∞–π' in message.text))
async def start_game(message: Message):
    await message.answer(text=LEXICON_RU['game'],
                         reply_markup=choose_keyboard)


@router.message(F.text == '–ö–∞–º–µ–Ω—åü™®')
@router.message(F.text == '–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è')
@router.message(F.text == '–ë—É–º–∞–≥–∞üìÑ')
async def game(message: Message):
    result, answer = move(message.text)
    update_stats(id=message.from_user.id, win=(0 if result == 'lose' else 1))

    await message.answer(text=f"–ú–æ–π –æ—Ç–≤–µ—Ç... \n\n{answer}")
    await message.answer(text=LEXICON_RU[result],
                         reply_markup=offer_keyboard)
    await message.answer(text=f"–°—ã–≥—Ä–∞–µ–º –µ—â—ë?")


@router.message(F.text == '–ù–µ —Ö–æ—á—É')
async def wait(message: Message):
    await message.answer(text=LEXICON_RU['wait'], reply_markup=wait_keyboard)
