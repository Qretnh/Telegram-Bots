from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ChatJoinRequest
from aiogram import Bot, Router, F
from aiogram.filters import CommandObject, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from config_data.config import config
from keyboards.user_keyboards import *
from payments.cryptomus import create_invoice_cryptomus, get_invoice_cryptomus
from payments.cryptobot import cryptobot_create_invoice, cryptobot_get_invoice
from settings.prices import set_prices
from database.database import DB

import asyncio

admin_chat_id = config.tg_bot.admin_ids[0]

price_RUB, price_USD = set_prices()

router = Router()
chat_id = -1002457858447


@router.message(Command(commands=['start']))
async def start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–∞–Ω–∞–ª "Private".\n'
                         '–ü–æ–¥–ø–∏—Å–∫–∞ - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è, –æ–ø–ª–∞—Ç—É –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤ –≤–∞–ª—é—Ç–µ –∏ –∫—Ä–∏–ø—Ç–µ.\n'
                         '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ü§ù',
                         reply_markup=menu_keyboard)
    await DB.add_user(message.from_user.id)


@router.callback_query(F.data == 'info')
async def info(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–í Private —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ '
                                  '–º–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª—é—à–µ—á–µ–∫',
                                  reply_markup=enter_keyboard)


@router.callback_query(F.data == 'pay')
async def time(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏',
                                  reply_markup=time_keyboard())


@router.callback_query(F.data.startswith('months'))
async def pay(callback: CallbackQuery):
    months = callback.data.split("|")[1]
    await callback.answer()
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
                                  reply_markup=payments_keyboard(months=months))


@router.callback_query(F.data.startswith('payment_Cryptobot'))
async def payment_cryptobot(callback: CallbackQuery, bot: Bot):
    months = int(callback.data.split("|")[1])
    invoice = await cryptobot_create_invoice(price_USD[f'{months} month'])
    id = invoice.invoice_id
    await callback.answer()
    await callback.message.answer("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É. –°—Å—ã–ª–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç\n"
                                  "(–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ ~1 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)",
                                  reply_markup=pay_cryptobot_keyboard(invoice))

    link_request = await bot.create_chat_invite_link(chat_id, "approve", creates_join_request=True)
    link_request = link_request.invite_link
    i = 0
    while i < 20:
        status = await cryptobot_get_invoice(id)
        status = status.status
        if status == "paid":
            await callback.message.answer(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª",
                                          reply_markup=approve_member_keyboard(link_request))
            await DB.update_user_subscription(callback.from_user.id, months)
            break
        i += 1
        await asyncio.sleep(30)


@router.callback_query(F.data.startswith('payment_Cryptomus'))
async def payment_Cryptomus(callback: CallbackQuery, bot: Bot):
    months = int(callback.data.split("|")[1])
    invoice = await create_invoice_cryptomus(callback.from_user.id, int(price_USD[f'{months} month']), 'USDT')
    print(invoice)
    id = invoice.invoice_id
    await callback.answer()
    await callback.message.answer("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É. –°—Å—ã–ª–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ 10 –º–∏–Ω—É—Ç\n"
                                  "(–û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –ø—Ä–∏–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ ~1 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)",
                                  reply_markup=pay_cryptomus_keyboard(invoice))

    link_request = await bot.create_chat_invite_link(chat_id, "approve", creates_join_request=True)
    link_request = link_request.invite_link
    i = 0
    while i < 20:
        status = await get_invoice_cryptomus()
        status = status.status
        if status == "paid":
            await callback.message.answer(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª",
                                          reply_markup=approve_member_keyboard(link_request))
            await DB.update_user_subscription(callback.from_user.id, months)
            break
        i += 1
        await asyncio.sleep(30)


@router.callback_query(F.data == "F.A.Q.")
async def faq(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await callback.message.answer(
        text='–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏',
        reply_markup=faq_keyboard)


@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    link_request = await bot.create_chat_invite_link(chat_id, "approve", creates_join_request=True)
    link_request = link_request.invite_link
    info = await DB.get_user_info(callback.from_user.id)
    if info:
        await callback.answer()
        await callback.message.edit_text(
            text=f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n{'‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–∞' if info[2] == 'NO' else '‚úÖ –û–ø–ª–∞—á–µ–Ω–∞. –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ' + info[3]}",
            reply_markup=approve_member_keyboard(link_request) if info[2] == 'YES' else None)


@router.chat_join_request()
async def check_request(request: ChatJoinRequest, bot: Bot):
    info = await DB.get_user_info(request.from_user.id)
    if info[2] == "YES":
        try:
            await bot.unban_chat_member(chat_id=chat_id,
                                        user_id=request.from_user.id)
        finally:
            await bot.approve_chat_join_request(chat_id=chat_id,
                                                user_id=request.from_user.id)


async def last_day_subscription(bot: Bot):
    users = await DB.get_users_last_day()
    for user in users:
        await bot.send_message(user,
                               text="–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞\n"
                                    "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —Å—Ä–æ–∫:",
                               reply_markup=time_keyboard())


async def kick_users(bot: Bot):
    users = await DB.get_users_to_remove()
    for user in users:
        try:
            await DB.remove_user_subscription(user)
            await bot.send_message(user, text="–ø–æ–∫–∏ –ø–æ–∫–∏")
            await bot.ban_chat_member(chat_id, user)
            await asyncio.sleep(1)
            await bot.unban_chat_member(chat_id, user)
        finally:
            await asyncio.sleep(1)
